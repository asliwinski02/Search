import random


def fitness(chromosome):
    return sum(chromosome)


def intialize_population(population_size, chromosome_length):
    population = []
    for i in range(population_size):
        chromosome = [random.randint(0, 1) for i in range(chromosome_length)]
        population.append(chromosome)
    return population


def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)
    child1 = parent1[:crossover_point] + parent2[crossover_point:]
    child2 = parent2[:crossover_point] + parent1[crossover_point:]
    return child1, child2


def mutate(chromosome, mutation_point):
    for i in range(len(chromosome)):
        if random.random() < mutation_point:
            chromosome[i] = 1 - chromosome[i]
    return chromosome


def genetic_algorithm(population_size, chromosome_length, mutation_rate, crossover_rate, generations):
    population = intialize_population(population_size, chromosome_length)

    for generation in range(generations):

        fitness_numbers = [fitness(chrom) for chrom in population]

        selected_parents = random.choices(population, k=population_size, weights=fitness_numbers)

        new_population = []
        for i in range(0, population_size, 2):
            parent1 = selected_parents[i]
            parent2 = selected_parents[i + 1]

            if random.random() < crossover_rate:
                child1, child2 = crossover(parent1, parent2)
                child1 = mutate(child1, mutation_rate)
                child2 = mutate(child2, mutation_rate)
                new_population.append(child1)
                new_population.append(child2)
            else:
                new_population.append(mutate(parent1, mutation_rate))
                new_population.append(mutate(parent2, mutation_rate))

        population = new_population

        print(new_population)


population_size = 10
chromosome_length = 8
mutation_rate = 0.2
crossover_rate = 0.7
generations = 15

genetic_algorithm(population_size, chromosome_length, mutation_rate, crossover_rate, generations)
